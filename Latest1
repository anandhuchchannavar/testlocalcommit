import grpc
import chat_pb2
import chat_pb2_grpc
import tkinter as tk
from threading import Thread

class ChatApp:
    def __init__(self, stub, name):
        self.stub = stub
        self.name = name

        self.root = tk.Tk()
        self.root.title(f"gRPC Chat {name}")

        self.chat_frame = tk.Frame(self.root)
        self.chat_frame.pack(padx=10, pady=10)

        self.message_listbox = tk.Listbox(self.chat_frame, width=50, height=10)
        self.message_listbox.pack(side=tk.LEFT, fill=tk.BOTH)

        self.scrollbar = tk.Scrollbar(self.chat_frame, orient=tk.VERTICAL)
        self.scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        self.message_listbox.config(yscrollcommand=self.scrollbar.set)
        self.scrollbar.config(command=self.message_listbox.yview)

        self.entry_frame = tk.Frame(self.root)
        self.entry_frame.pack(padx=10, pady=10, fill=tk.X)

        self.message_entry = tk.Entry(self.entry_frame, width=40)
        self.message_entry.pack(side=tk.LEFT, padx=5)

        self.send_button = tk.Button(self.entry_frame, text="Send", command=self.send_message)
        self.send_button.pack(side=tk.RIGHT, padx=5)

        self.receive_messages_thread = Thread(target=self.receive_messages)
        self.receive_messages_thread.start()

        self.root.protocol("WM_DELETE_WINDOW", self.on_close)

    def send_message(self):
        message_content = self.message_entry.get().strip()
        if message_content:
            message = chat_pb2.ChatMessage(sender=self.name, content=message_content)
            self.stub.SendMessage(message)
            self.message_entry.delete(0, tk.END)

    def receive_messages(self):
        for response in self.stub.ChatStream(chat_pb2.Empty()):
            self.display_message(response.sender, response.content)

    def display_message(self, sender, content):
        message = f"{sender}: {content}"
        self.message_listbox.insert(tk.END, message)
        self.message_listbox.yview(tk.END)

    def on_close(self):
        self.root.destroy()
        exit(0)

def create_server_window(stub):
    server_window = tk.Toplevel()
    server_window.title("Server Chat Window")

    server_chat_frame = tk.Frame(server_window)
    server_chat_frame.pack(padx=10, pady=10)

    server_message_listbox = tk.Listbox(server_chat_frame, width=50, height=10)
    server_message_listbox.pack(side=tk.LEFT, fill=tk.BOTH)

    server_scrollbar = tk.Scrollbar(server_chat_frame, orient=tk.VERTICAL)
    server_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    server_message_listbox.config(yscrollcommand=server_scrollbar.set)
    server_scrollbar.config(command=server_message_listbox.yview)

    def send_server_message():
        message_content = server_message_entry.get().strip()
        if message_content:
            message = chat_pb2.ChatMessage(sender="Server", content=message_content)
            stub.SendMessage(message)
            server_message_entry.delete(0, tk.END)

    def receive_server_messages():
        for response in stub.ChatStream(chat_pb2.Empty()):
            display_server_message(response.sender, response.content)

    def display_server_message(sender, content):
        message = f"{sender}: {content}"
        server_message_listbox.insert(tk.END, message)
        server_message_listbox.yview(tk.END)

    server_entry_frame = tk.Frame(server_window)
    server_entry_frame.pack(padx=10, pady=10, fill=tk.X)

    server_message_entry = tk.Entry(server_entry_frame, width=40)
    server_message_entry.pack(side=tk.LEFT, padx=5)

    server_send_button = tk.Button(server_entry_frame, text="Send", command=send_server_message)
    server_send_button.pack(side=tk.RIGHT, padx=5)

    receive_server_thread = Thread(target=receive_server_messages)
    receive_server_thread.start()

    server_window.protocol("WM_DELETE_WINDOW", server_window.destroy)
    return server_window, display_server_message

def main():
    channel = grpc.insecure_channel('localhost:9090')  # Replace with your server address
    stub = chat_pb2_grpc.ChatServiceStub(channel)

    client_app = ChatApp(stub, "Client")

    server_window, display_server_message = create_server_window(stub)

    def forward_message(sender, content):
        client_app.display_message(sender, content)
        display_server_message(sender, content)

    # Override SendMessage to forward the message to both windows
    original_send_message = stub.SendMessage
    def SendMessage_with_forwarding(message):
        response = original_send_message(message)
        forward_message(response.sender, response.content)
        return response
    stub.SendMessage = SendMessage_with_forwarding

    client_app.root.mainloop()

if __name__ == '__main__':
    main()
