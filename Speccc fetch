const { test, expect } = require('@playwright/test');
const fs = require('fs');
const path = require('path');

// URLs to compare
const oldUrl = 'https://old-service.example.com/endpoint';
const newUrl = 'https://new-service.example.com/endpoint';

// Directories
const requestsDir = path.join(__dirname, 'requests');
const resultsDir = path.join(__dirname, 'test-results');

// Create results directory if not exists
if (!fs.existsSync(resultsDir)) fs.mkdirSync(resultsDir);

// Keys to ignore during diff
const ignoredKeys = ['timestamp', 'id', 'uuid'];

// Recursively get all request JSON files
function getAllJsonFiles(dir) {
  let results = [];
  const entries = fs.readdirSync(dir);
  entries.forEach(entry => {
    const fullPath = path.join(dir, entry);
    const stat = fs.statSync(fullPath);
    if (stat.isDirectory()) {
      results = results.concat(getAllJsonFiles(fullPath));
    } else if (entry.endsWith('.json')) {
      results.push(fullPath);
    }
  });
  return results;
}

// Remove specified keys deeply
function removeKeysDeep(obj, keys) {
  if (Array.isArray(obj)) {
    return obj.map(item => removeKeysDeep(item, keys));
  } else if (typeof obj === 'object' && obj !== null) {
    return Object.entries(obj).reduce((acc, [key, val]) => {
      if (!keys.includes(key)) {
        acc[key] = removeKeysDeep(val, keys);
      }
      return acc;
    }, {});
  }
  return obj;
}

// Get difference between two objects
function getDiff(a, b) {
  const diffs = [];
  function compare(x, y, path = '') {
    if (typeof x !== typeof y) {
      diffs.push(`Type mismatch at ${path}: ${typeof x} vs ${typeof y}`);
    } else if (typeof x === 'object' && x !== null && y !== null) {
      const keys = new Set([...Object.keys(x), ...Object.keys(y)]);
      for (const key of keys) {
        compare(x[key], y[key], path ? `${path}.${key}` : key);
      }
    } else if (x !== y) {
      diffs.push(`Value mismatch at ${path}: ${JSON.stringify(x)} vs ${JSON.stringify(y)}`);
    }
  }
  compare(a, b);
  return diffs;
}

// Load request files
const requestFiles = getAllJsonFiles(requestsDir);

// Run one test per request
for (const filePath of requestFiles) {
  const relativePath = path.relative(requestsDir, filePath);
  const testName = relativePath.replace(/[\\/]/g, '_').replace(/\.json$/, '');

  test(`Compare responses for ${relativePath}`, async () => {
    const requestBody = JSON.parse(fs.readFileSync(filePath, 'utf8'));

    let oldJson, newJson;
    try {
      const [oldRes, newRes] = await Promise.all([
        fetch(oldUrl, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(requestBody)
        }),
        fetch(newUrl, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(requestBody)
        })
      ]);

      if (!oldRes.ok || !newRes.ok) {
        throw new Error(`One or both APIs failed with status: old=${oldRes.status}, new=${newRes.status}`);
      }

      oldJson = await oldRes.json();
      newJson = await newRes.json();
    } catch (err) {
      throw new Error(`API call failed: ${err.message}`);
    }

    // Save raw responses
    const safeBase = testName;
    fs.writeFileSync(path.join(resultsDir, `${safeBase}_old.json`), JSON.stringify(oldJson, null, 2));
    fs.writeFileSync(path.join(resultsDir, `${safeBase}_new.json`), JSON.stringify(newJson, null, 2));

    // Remove ignored keys
    const cleanedOld = removeKeysDeep(oldJson, ignoredKeys);
    const cleanedNew = removeKeysDeep(newJson, ignoredKeys);

    // Compare
    const diffs = getDiff(cleanedOld, cleanedNew);
    if (diffs.length > 0) {
      console.log(`\n‚ùå Differences found in ${relativePath}:\n` + diffs.join('\n'));
    }

    expect(diffs).toEqual([]);
  });
}
