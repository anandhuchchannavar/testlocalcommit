public class JsonExtractor {
    private static final Pattern JSON_ARRAY_PATTERN =
            Pattern.compile("(\.*\)", Pattern.DOTALL);

    public static String extractJsonArray(String input) {
        if (input == null) return null;

        // Remove markdown fences if present
        String cleaned = input.replaceAll("(?s)```json", "")
                              .replaceAll("(?s)```", "")
                              .trim();

        // Extract the JSON array
        Matcher m = JSON_ARRAY_PATTERN.matcher(cleaned);
        if (m.find()) {
            return m.group(1).trim();
        }

        return null;
    }
}

Pattern.compile("(\\[.*\\])", Pattern.DOTALL);



___________________

@SuppressWarnings("unchecked")
private static String serialize(Object o) {
    if (o == null) return "null";

    if (o instanceof String s) {
        return "\"" + s
                .replace("\\", "\\\\")
                .replace("\"", "\\\"")
                .replace("\r", "\\r")
                .replace("\n", "\\n") + "\"";
    }

    if (o instanceof Number || o instanceof Boolean) return o.toString();

    if (o instanceof Map<?, ?> m) {
        return "{" + m.entrySet().stream()
                .map(e -> serialize(e.getKey().toString()) + ":" + serialize(e.getValue()))
                .collect(Collectors.joining(",")) + "}";
    }

    if (o instanceof Collection<?> c) {
        return "[" + c.stream().map(HtmlReportGenerator::serialize).collect(Collectors.joining(",")) + "]";
    }

    // POJOs (like ReviewComment)
    try {
        Map<String, Object> m = new LinkedHashMap<>();
        for (var f : o.getClass().getFields()) {
            Object value = f.get(o);
            if (value == null) value = "";  // Replace null with empty string to avoid broken JSON
            m.put(f.getName(), value);
        }
        return serialize(m);
    } catch (Exception e) {
        // fallback to empty object instead of invalid JSON
        return "{}";
    }
}
